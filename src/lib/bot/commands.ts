import { Telegraf } from 'telegraf';
import { store } from '@/store/store';
import { telegramApi } from '@/features/telegram/telegramApi';
import { setVideoChatActive } from '@/features/telegram/telegramSlice';
import { BotContext, BotPermissions } from '@/types/telegram';

export function setupCommands(bot: Telegraf<BotContext>) {
  bot.command('start_video_chat', async (ctx) => {
    if (!ctx.chat || !ctx.from || !ctx.state.isAdmin) {
      return ctx.reply('üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
    }

    try {
      await ctx.sendChatAction('record_video');
      
      const result = await store.dispatch(
        telegramApi.endpoints.sendVideoChat.initiate({
          chat_id: ctx.chat.id,
          title: '24/7 Video Chat',
        })
      ).unwrap();

      store.dispatch(setVideoChatActive({ 
        chatId: String(ctx.chat.id), 
        active: result.ok 
      }));
      
      await ctx.reply(result.ok ? '‚úÖ –í–∏–¥–µ–æ—á–∞—Ç –∑–∞–ø—É—â–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ—á–∞—Ç–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ—á–∞—Ç–∞');
    }
  });

  bot.command('stop_video_chat', async (ctx) => {
    if (!ctx.chat || !ctx.from || !ctx.state.isAdmin) {
      return ctx.reply('üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
    }

    store.dispatch(setVideoChatActive({ 
      chatId: String(ctx.chat.id), 
      active: false 
    }));
    await ctx.reply('‚èπÔ∏è –í–∏–¥–µ–æ—á–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  });

  bot.command('status', async (ctx) => {
    const state = store.getState();
    const isActive = state.telegram.activeVideoChats[String(ctx.chat?.id || '')] || false;
    
    await ctx.replyWithMarkdownV2(
      `*–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*\n` +
      `–í–∏–¥–µ–æ—á–∞—Ç: ${isActive ? '‚úÖ –í–∫–ª' : '‚ùå –í—ã–∫–ª'}\n` +
      `–ê–¥–º–∏–Ω: ${ctx.state.isAdmin ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`
    );
  });

  bot.command('set_permissions', async (ctx) => {
    if (!ctx.chat || !ctx.from || !ctx.state.isAdmin) {
      return ctx.reply('üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
    }

    try {
      const permissions: BotPermissions = {
        can_send_messages: true,
        can_send_media: true,
        can_send_polls: true,
        can_send_other_messages: true,
        can_add_web_page_previews: false,
      };

      await store.dispatch(
        telegramApi.endpoints.setChatPermissions.initiate({
          chat_id: ctx.chat.id,
          permissions,
        })
      ).unwrap();

      await ctx.reply('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤');
    }
  });
}